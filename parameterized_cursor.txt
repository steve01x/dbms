
1. Creates two tables: `N_RollCall` (New) and `O_RollCall` (Old).
2. Inserts **5 sample records** into `N_RollCall`.
3. Inserts **3 of those 5 records** into `O_RollCall` to simulate duplicates.
4. Uses a **PL/SQL-style block with a parameterized cursor** to merge non-duplicate data from `N_RollCall` into `O_RollCall`.
5. Includes **MySQL-compatible code**, since MySQL does **not support PL/SQL** directly (PL/SQL is for Oracle). We'll use **MySQL procedural features**, like `DECLARE`, `CURSOR`, and `LOOP`.

---


```sql
-- Drop tables if they exist
DROP TABLE IF EXISTS N_RollCall;
DROP TABLE IF EXISTS O_RollCall;

-- Create Old Roll Call Table
CREATE TABLE O_RollCall (
    roll_no INT PRIMARY KEY,
    name VARCHAR(100),
    present_status VARCHAR(10)
);

-- Create New Roll Call Table
CREATE TABLE N_RollCall (
    roll_no INT PRIMARY KEY,
    name VARCHAR(100),
    present_status VARCHAR(10)
);

-- Insert 5 records into N_RollCall
INSERT INTO N_RollCall (roll_no, name, present_status)
VALUES 
(1, 'Alice', 'Present'),
(2, 'Bob', 'Absent'),
(3, 'Charlie', 'Present'),
(4, 'David', 'Absent'),
(5, 'Eva', 'Present');

-- Insert 3 records into O_RollCall to simulate duplicates
INSERT INTO O_RollCall (roll_no, name, present_status)
VALUES 
(1, 'Alice', 'Present'),
(2, 'Bob', 'Absent'),
(3, 'Charlie', 'Present');

-- ========================================
-- MERGE OPERATION USING PARAMETERIZED CURSOR
-- ========================================

DELIMITER //

CREATE PROCEDURE MergeRollCall()
BEGIN
    DECLARE v_roll_no INT;
    DECLARE v_name VARCHAR(100);
    DECLARE v_status VARCHAR(10);
    DECLARE done INT DEFAULT FALSE;

    -- Cursor to fetch records from N_RollCall
    DECLARE cur CURSOR FOR 
        SELECT roll_no, name, present_status FROM N_RollCall;

    -- Continue handler for loop end
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO v_roll_no, v_name, v_status;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Check if the record already exists in O_RollCall
        IF NOT EXISTS (SELECT 1 FROM O_RollCall WHERE roll_no = v_roll_no) THEN
            INSERT INTO O_RollCall (roll_no, name, present_status)
            VALUES (v_roll_no, v_name, v_status);
        END IF;
    END LOOP;

    CLOSE cur;
END //

DELIMITER ;

-- ===========================
-- Call the procedure to merge
-- ===========================
CALL MergeRollCall();

-- ===========================
-- Final result in O_RollCall
-- ===========================
SELECT * FROM O_RollCall;
```

---


* **Before procedure call**: `O_RollCall` has roll numbers 1, 2, 3.
* **After procedure call**: roll numbers 4 and 5 from `N_RollCall` are added.
* Duplicates are skipped using the `IF NOT EXISTS` condition inside the cursor loop.

---


